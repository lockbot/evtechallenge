services:
  # Couchbase Database
  couchbase:
    image: couchbase:community-7.6.2
    container_name: evt-db
    ports:
      - "8091-8097:8091-8097"  # Client-to-node ports
      - "9123:9123"            # Prometheus metrics port
    environment:
      - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_ADMINISTRATOR_USERNAME:-Administrator}
      - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_ADMINISTRATOR_PASSWORD:-password}
      - COUCHBASE_HOSTNAME=evt-db
    volumes:
      - couchbase_data:/opt/couchbase/var
      - couchbase_data:/tmp/db-init-flag
    networks:
      - evtechallenge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Couchbase Setup Service (runs once to create bucket and user)
  couchbase-setup:
    image: couchbase:community-7.6.2
    container_name: evt-db-setup
    depends_on:
      couchbase:
        condition: service_healthy
    environment:
      - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_ADMINISTRATOR_USERNAME:-Administrator}
      - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_ADMINISTRATOR_PASSWORD:-password}
      - COUCHBASE_USERNAME=${COUCHBASE_USERNAME:-evtechallenge_user}
      - COUCHBASE_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET:-EvTeChallenge}
    volumes:
      - couchbase_data:/tmp/db-init-flag
      - ./scripts/couchbase-setup.sh:/scripts/couchbase-setup.sh:ro
    command: ["/bin/bash", "/scripts/couchbase-setup.sh"]
    networks:
      - evtechallenge_network
    restart: "no"

  # API REST Service
  api:
    build: 
      context: .
      dockerfile: api-rest/Dockerfile
    container_name: evtechallenge-api
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      couchbase-setup:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
      keycloak-setup:
        condition: service_completed_successfully
    environment:
      - COUCHBASE_URL=${COUCHBASE_URL:-couchbase://evt-db}
      - COUCHBASE_USERNAME=${COUCHBASE_USERNAME:-evtechallenge_user}
      - COUCHBASE_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET:-EvTeChallenge}
      - ENABLE_ELASTICSEARCH=${ENABLE_ELASTICSEARCH:-false}
      - ENABLE_SYSTEM_METRICS=${ENABLE_SYSTEM_METRICS:-false}
      - ENABLE_BUSINESS_METRICS=${ENABLE_BUSINESS_METRICS:-false}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      - API_PORT=${API_PORT:-8080}
      - API_LOG_LEVEL=${API_LOG_LEVEL:-info}
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://keycloak:8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-evtechallenge}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-api-client}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-}
      - KEYCLOAK_ADMIN_USER=${KEYCLOAK_ADMIN_USER:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - TENANT1_USERNAME=${TENANT1_USERNAME:-tenant1}
      - TENANT1_PASSWORD=${TENANT1_PASSWORD:-tnt1}
      - TENANT2_USERNAME=${TENANT2_USERNAME:-tenant2}
      - TENANT2_PASSWORD=${TENANT2_PASSWORD:-tnt2}
    networks:
      - evtechallenge_network
    restart: unless-stopped

  # FHIR Client Service
  fhir:
    build:
      context: .
      dockerfile: fhir-client/Dockerfile
    container_name: evtechallenge-fhir
    ports:
      - "${FHIR_PORT}:${FHIR_PORT}"
    depends_on:
      couchbase-setup:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
    environment:
      - COUCHBASE_URL=${COUCHBASE_URL:-couchbase://evt-db}
      - COUCHBASE_USERNAME=${COUCHBASE_USERNAME:-evtechallenge_user}
      - COUCHBASE_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET:-EvTeChallenge}
      - ENABLE_ELASTICSEARCH=${ENABLE_ELASTICSEARCH:-false}
      - ENABLE_SYSTEM_METRICS=${ENABLE_SYSTEM_METRICS:-false}
      - ENABLE_BUSINESS_METRICS=${ENABLE_BUSINESS_METRICS:-false}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      - FHIR_BASE_URL=${FHIR_BASE_URL:-http://hapi.fhir.org/baseR4}
      - FHIR_TIMEOUT=${FHIR_TIMEOUT:-30s}
      - FHIR_PORT=${FHIR_PORT:-8081}
      - FHIR_LOG_LEVEL=${FHIR_LOG_LEVEL:-info}
    networks:
      - evtechallenge_network
    restart: "no"

  # Keycloak Authentication Service
  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    container_name: evt-iam
    ports:
      - "${KEYCLOAK_PORT:-8082}:8080"
    # - "9000:9000"  # Keycloak management port - internal only
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN:-admin}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_DB=dev-file
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_LOG_LEVEL=${KEYCLOAK_LOG_LEVEL:-INFO}
      - KC_FEATURES=token-exchange,admin-fine-grained-authz
    command: ["start-dev"]
    networks:
      - evtechallenge_network
    # Healthcheck disabled - using external HTTP monitoring in setup script instead
    # Following Keycloak docs: "external HTTP requests should be used for health checks"
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 60s
    restart: unless-stopped

  # Keycloak Setup Service (runs once to create realm, client, and users)
  keycloak-setup:
    image: curlimages/curl:latest
    container_name: evt-iam-setup
    depends_on:
      keycloak:
        condition: service_started
    environment:
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://keycloak:8080}
      - KEYCLOAK_ADMIN_USER=${KEYCLOAK_ADMIN_USER:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-evtechallenge}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-api-client}
      - TENANT1_USERNAME=${TENANT1_USERNAME:-tenant1}
      - TENANT1_PASSWORD=${TENANT1_PASSWORD:-tnt1}
      - TENANT2_USERNAME=${TENANT2_USERNAME:-tenant2}
      - TENANT2_PASSWORD=${TENANT2_PASSWORD:-tnt2}
    volumes:
      - keycloak_data:/tmp/keycloak-init-flag
      - ./scripts/setup-keycloak.sh:/scripts/setup-keycloak.sh:ro
    command: ["/bin/sh", "/scripts/setup-keycloak.sh"]
    networks:
      - evtechallenge_network
    restart: "no"

  # Elasticsearch for logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - evtechallenge_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 30s

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - evtechallenge_network
    profiles:
      - observability
  
  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - evtechallenge_network
    profiles:
      - observability

volumes:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  couchbase_data:
  keycloak_data:

networks:
  evtechallenge_network:
    driver: bridge