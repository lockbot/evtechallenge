services:
  # Couchbase Database
  evt-db:
    image: couchbase:community-7.6.2
    container_name: evt-db
    ports:
      - "8091-8097:8091-8097"  # Client-to-node ports
      - "9123:9123"            # Prometheus metrics port
    environment:
      - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_ADMINISTRATOR_USERNAME:-Administrator}
      - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_ADMINISTRATOR_PASSWORD:-password}
      - COUCHBASE_HOSTNAME=evt-db
    volumes:
      - couchbase_data:/opt/couchbase/var
      - couchbase_data:/tmp/db-init-flag
    networks:
      - evtechallenge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Couchbase Setup Service (runs once to create bucket and user)
  evt-db-setup:
    image: couchbase:community-7.6.2
    container_name: evt-db-setup
    depends_on:
      evt-db:
        condition: service_healthy
    environment:
      - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_ADMINISTRATOR_USERNAME:-Administrator}
      - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_ADMINISTRATOR_PASSWORD:-password}
      - COUCHBASE_USERNAME=${COUCHBASE_USERNAME:-evtechallenge_user}
      - COUCHBASE_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET:-evtechallenge}
    volumes:
      - couchbase_data:/tmp/db-init-flag
      - ./scripts/evt-db-setup.sh:/scripts/evt-db-setup.sh:ro
    command: ["/bin/sh", "/scripts/evt-db-setup.sh"]
    networks:
      - evtechallenge_network
    restart: "no"

  # API REST Service
  api:
    build: 
      context: .
      dockerfile: api-rest/Dockerfile
    container_name: evtechallenge-api
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      evt-db-setup:
        condition: service_completed_successfully
    environment:
      - COUCHBASE_URL=${COUCHBASE_URL:-couchbase://evt-db}
      - COUCHBASE_USERNAME=${COUCHBASE_USERNAME:-evtechallenge_user}
      - COUCHBASE_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET:-evtechallenge}
      - ENABLE_ELASTICSEARCH=${ENABLE_ELASTICSEARCH:-false}
      - ENABLE_SYSTEM_METRICS=${ENABLE_SYSTEM_METRICS:-false}
      - ENABLE_BUSINESS_METRICS=${ENABLE_BUSINESS_METRICS:-false}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      - API_PORT=${API_PORT:-8080}
      - API_LOG_LEVEL=${API_LOG_LEVEL:-info}
    networks:
      - evtechallenge_network
    restart: unless-stopped

  # FHIR Client Service
  fhir:
    build:
      context: .
      dockerfile: fhir-client/Dockerfile
    container_name: evtechallenge-fhir
    ports:
      - "${FHIR_PORT}:${FHIR_PORT}"
    depends_on:
      evt-db-setup:
        condition: service_completed_successfully
    environment:
      - COUCHBASE_URL=${COUCHBASE_URL:-couchbase://evt-db}
      - COUCHBASE_USERNAME=${COUCHBASE_USERNAME:-evtechallenge_user}
      - COUCHBASE_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET:-evtechallenge}
      - ENABLE_ELASTICSEARCH=${ENABLE_ELASTICSEARCH:-false}
      - ENABLE_SYSTEM_METRICS=${ENABLE_SYSTEM_METRICS:-false}
      - ENABLE_BUSINESS_METRICS=${ENABLE_BUSINESS_METRICS:-false}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      - FHIR_BASE_URL=${FHIR_BASE_URL:-http://hapi.fhir.org/baseR4}
      - FHIR_TIMEOUT=${FHIR_TIMEOUT:-30s}
      - FHIR_PORT=${FHIR_PORT:-8081}
      - FHIR_LOG_LEVEL=${FHIR_LOG_LEVEL:-info}
    networks:
      - evtechallenge_network
    restart: "no"

  # Elasticsearch for logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - evtechallenge_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 30s
    profiles:
      - observability

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - evtechallenge_network
    profiles:
      - observability
  
  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - evtechallenge_network
    profiles:
      - observability

volumes:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  couchbase_data:

networks:
  evtechallenge_network:
    driver: bridge