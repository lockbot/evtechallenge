[jil_]

You're absolutely right! I was overcomplicating it with verbose boilerplate. I've now fixed the API-REST to match Bob's simple approach in FHIR-CLIENT:

**✅ Fixed - Simple Dependency Injection:**

1. **Removed all globals** - No more `var (cbCluster, cbBucket, cbBucketName)`
2. **Simple Connection struct** - Just like Bob's FHIR-CLIENT approach
3. **GetConnOrGenConn()** - Creates connection instances per request
4. **Models take Connection** - All models now accept `*Connection` parameter
5. **Handlers create connections** - Each handler creates its own connection and passes to models
6. **Context support** - All operations properly use context.Context

**Key Changes:**
- `dal.GetConnOrGenConn()` creates connection instances
- Models: `NewEncounterModel(conn *Connection)` 
- Base functions: `GetResourceByID(ctx, conn, resourceType, id)`
- Handlers: Create `conn` per request, pass to models, `defer conn.Close()`

**Result:** 
- No globals ✅
- Simple dependency injection ✅  
- Context support ✅
- Matches Bob's FHIR-CLIENT pattern ✅
- Much cleaner and less verbose ✅

**✅ FIXED - Now matches Bob's clean ResourceModel pattern:**

1. **ResourceModel** - Centralizes all base database operations (GetResource, ListResources, UpsertResource, ResourceExists)
2. **Entity Models** - Now delegate to ResourceModel like Bob's FHIR-CLIENT:
   - `NewEncounterModel(resourceModel *ResourceModel)`
   - `NewPatientModel(resourceModel *ResourceModel)` 
   - `NewPractitionerModel(resourceModel *ResourceModel)`
3. **Handlers** - Create ResourceModel and pass to entity models
4. **Clean separation** - No duplicated logic, proper delegation pattern

**Result:** Now exactly matches Bob's superior architecture with ResourceModel centralizing base operations and entity models delegating to it. Much cleaner!
